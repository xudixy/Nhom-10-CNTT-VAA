{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { GridEditModes, GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridEditRowsStateSelector } from \"./gridEditingSelectors.js\";\nimport { isPrintableKey, isPasteShortcut } from \"../../../utils/keyboardUtils.js\";\nimport { gridRowsDataRowIdToIdLookupSelector } from \"../rows/gridRowsSelector.js\";\nimport { deepClone } from \"../../../utils/utils.js\";\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from \"../../../models/params/gridEditCellParams.js\";\nimport { getDefaultCellValue } from \"./utils.js\";\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridCellEditStartReasons.pasteKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown || reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.pasteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  const runIfNoFieldErrors = callback => async (...args) => {\n    if (callback) {\n      const {\n        id,\n        field\n      } = args[0];\n      const editRowsState = apiRef.current.state.editRows;\n      const hasFieldErrors = editRowsState[id][field]?.error;\n      if (!hasFieldErrors) {\n        callback(...args);\n      }\n    }\n  };\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', runIfNoFieldErrors(props.onCellEditStop));\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    const value = apiRef.current.getCellValue(id, field);\n    let newValue = value;\n    if (deleteValue) {\n      newValue = getDefaultCellValue(apiRef.current.getColumn(field));\n    } else if (initialValue) {\n      newValue = initialValue;\n    }\n    const column = apiRef.current.getColumn(field);\n    const shouldProcessEditCellProps = !!column.preProcessEditCellProps && deleteValue;\n    let newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: shouldProcessEditCellProps\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n    if (shouldProcessEditCellProps) {\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row: apiRef.current.getRow(id),\n        props: newProps,\n        hasChanged: newValue !== value\n      }));\n      // Check if still in edit mode before updating\n      if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {\n        const editingState = gridEditRowsStateSelector(apiRef.current.state);\n        updateOrDeleteFieldState(id, field, _extends({}, newProps, {\n          value: editingState[id][field].value,\n          isProcessingProps: false\n        }));\n      }\n    }\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'], 'error');\n        }\n      };\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id]?.[field]?.error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter(value, row, column, apiRef) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  useEnhancedEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        const prevMode = copyOfPrevCellModes[id]?.[field]?.mode || GridCellModes.View;\n        const originalId = idToIdLookup[id] ?? id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","unstable_useEnhancedEffect","useEnhancedEffect","warnOnce","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","isPasteShortcut","gridRowsDataRowIdToIdLookupSelector","deepClone","GridCellEditStartReasons","GridCellEditStopReasons","getDefaultCellValue","useGridCellEditing","apiRef","props","cellModesModel","setCellModesModel","useState","cellModesModelRef","useRef","prevCellModesModel","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","runIfEditModeIsCell","callback","args","editMode","Cell","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","which","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","canStartEditing","unstable_applyPipeProcessors","cellParams","printableKeyDown","pasteKeyDown","deleteKeyDown","handleCellEditStart","startCellEditModeParams","deleteValue","startCellEditMode","handleCellEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopCellEditMode","runIfNoFieldErrors","editRowsState","state","editRows","hasFieldErrors","error","onCellEditStart","onCellEditStop","editingState","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","api","updateFieldInCellModesModel","newProps","_newModel$id","otherFields","map","Object","keys","length","updateOrDeleteFieldState","setState","newEditingState","forceUpdate","other","updateStateToStartCellEditMode","initialValue","value","getCellValue","newValue","getColumn","column","shouldProcessEditCellProps","preProcessEditCellProps","isProcessingProps","setCellFocus","Promise","resolve","row","getRow","hasChanged","updateStateToStopCellEditMode","finishCellEditMode","moveFocusToRelativeCell","rowUpdate","getRowWithUpdatedValuesFromCellEditing","handleError","errorThrown","process","env","NODE_ENV","rowId","then","finalRowUpdate","updateRows","catch","setCellEditingEditCellValue","debounceMs","unstable_skipValueParser","skipValueParser","parsedValue","valueParser","changeReason","valueSetter","editingApi","editingPrivateApi","useEffect","idToIdLookup","copyOfPrevCellModes","entries","forEach","fields","prevMode","originalId"],"sources":["/Users/hoanggiakiet/Documents/EcommerceProject/front-end/admin-dashboard/node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback, unstable_useEnhancedEffect as useEnhancedEffect } from '@mui/utils';\nimport { warnOnce } from '@mui/x-internals/warning';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from \"../../utils/useGridApiEventHandler.js\";\nimport { GridEditModes, GridCellModes } from \"../../../models/gridEditRowModel.js\";\nimport { useGridApiMethod } from \"../../utils/useGridApiMethod.js\";\nimport { gridEditRowsStateSelector } from \"./gridEditingSelectors.js\";\nimport { isPrintableKey, isPasteShortcut } from \"../../../utils/keyboardUtils.js\";\nimport { gridRowsDataRowIdToIdLookupSelector } from \"../rows/gridRowsSelector.js\";\nimport { deepClone } from \"../../../utils/utils.js\";\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from \"../../../models/params/gridEditCellParams.js\";\nimport { getDefaultCellValue } from \"./utils.js\";\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI X: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: to replace at one point. See https://github.com/mui/material-ui/pull/39713#discussion_r1381678957.\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (isPasteShortcut(event)) {\n        reason = GridCellEditStartReasons.pasteKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Backspace' || event.key === 'Delete') {\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown || reason === GridCellEditStartReasons.deleteKeyDown || reason === GridCellEditStartReasons.pasteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  const runIfNoFieldErrors = callback => async (...args) => {\n    if (callback) {\n      const {\n        id,\n        field\n      } = args[0];\n      const editRowsState = apiRef.current.state.editRows;\n      const hasFieldErrors = editRowsState[id][field]?.error;\n      if (!hasFieldErrors) {\n        callback(...args);\n      }\n    }\n  };\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', runIfNoFieldErrors(props.onCellEditStop));\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {\n        api: apiRef.current\n      });\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    const value = apiRef.current.getCellValue(id, field);\n    let newValue = value;\n    if (deleteValue) {\n      newValue = getDefaultCellValue(apiRef.current.getColumn(field));\n    } else if (initialValue) {\n      newValue = initialValue;\n    }\n    const column = apiRef.current.getColumn(field);\n    const shouldProcessEditCellProps = !!column.preProcessEditCellProps && deleteValue;\n    let newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: shouldProcessEditCellProps\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n    if (shouldProcessEditCellProps) {\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row: apiRef.current.getRow(id),\n        props: newProps,\n        hasChanged: newValue !== value\n      }));\n      // Check if still in edit mode before updating\n      if (apiRef.current.getCellMode(id, field) === GridCellModes.Edit) {\n        const editingState = gridEditRowsStateSelector(apiRef.current.state);\n        updateOrDeleteFieldState(id, field, _extends({}, newProps, {\n          value: editingState[id][field].value,\n          isProcessingProps: false\n        }));\n      }\n    }\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else if (process.env.NODE_ENV !== 'production') {\n          warnOnce(['MUI X: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, for example `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see https://mui.com/x/react-data-grid/editing/#server-side-persistence.'], 'error');\n        }\n      };\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row, {\n          rowId: id\n        })).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, row, column, apiRef);\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !editingState[id]?.[field]?.error;\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter(value, row, column, apiRef) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n\n  // Run this effect synchronously so that the keyboard event can impact the yet-to-be-rendered input.\n  useEnhancedEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        const prevMode = copyOfPrevCellModes[id]?.[field]?.mode || GridCellModes.View;\n        const originalId = idToIdLookup[id] ?? id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}